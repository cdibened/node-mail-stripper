// Generated by CoffeeScript 1.6.3
(function() {
  var MailStripper;

  MailStripper = (function() {
    function MailStripper(opts) {
      this.opts = opts;
      if (this.opts.patterns) {
        this.patterns = this.patterns.concat(this.opts.patterns);
      }
    }

    MailStripper.prototype.patterns = [/^\s*--/, /\d{4}-\d{2}-\d{2} \d{2}:\d{2} GMT\+\d{2}:\d{2}/, /^â€”/, /<[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,8}>/i];

    MailStripper.prototype.lineShouldBeStripped = function(line) {
      var pattern, _i, _len, _ref;
      _ref = this.patterns;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pattern = _ref[_i];
        if (pattern.test(line)) {
          return true;
        }
      }
      return false;
    };

    MailStripper.prototype.lineContainsName = function(line, name) {
      var name_re;
      name_re = new RegExp("^\\s*" + name + "\\s*$", 'i');
      return name_re.test(line);
    };

    MailStripper.prototype.parse = function(body, name) {
      var line, lines, message_lines, type, _i, _len;
      lines = body.replace(/\r\n/g, '\n').split('\n');
      message_lines = [];
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        type = this.lineShouldBeStripped(line);
        if (name) {
          type = type || this.lineContainsName(line, name);
        }
        if (!type) {
          message_lines.push(line);
        } else {
          break;
        }
      }
      while (message_lines.length > 0 && message_lines[message_lines.length - 1] === '') {
        message_lines.pop();
      }
      return message_lines.join('\n');
    };

    return MailStripper;

  })();

  module.exports = MailStripper;

}).call(this);
